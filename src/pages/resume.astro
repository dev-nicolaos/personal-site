---
import { type CollectionEntry, getCollection, z } from "astro:content";
import Logo from "@components/Logo.astro";
import BaseLayout from "@layouts/BaseLayout.astro";
import {
	dualLevelResumeSection,
	singleLevelResumeSection,
} from "../content/config";

type SectionId = CollectionEntry<"resume-sections">["id"];
type Sections = {
	[key in SectionId]: CollectionEntry<"resume-sections">["data"];
};
type DualLevelResumeSection = z.infer<typeof dualLevelResumeSection>;
type SingleLevelResumeSection = z.infer<typeof singleLevelResumeSection>;

const sections: Sections = (await getCollection("resume-sections")).reduce(
	(acc, curr) => {
		acc[curr.id] = curr.data;
		return acc;
	},
	{} as Sections,
);

const orderedSectionNames: Array<SectionId> = [
	"Work Experience",
	"Education",
	"Technical Skills",
	"Essential Traits",
	"Volunteer Work",
	"Awards",
] as const;
---

<style>
	header {
		display: grid;
		gap: var(--space-2);
	}

	header img {
		display: none;
	}

	.contact-info {
		display: flex;
		flex-direction: column;
		font-size: var(--font-size-base);
		gap: var(--space-1-2);
	}

	section {
		margin-block-start: var(--space-6);
	}

	.section-list {
		line-height: var(--line-height-prose);
		margin-block-start: var(--space-4);
	}

	.subsection:not(:first-child) {
		margin-block-start: var(--space-5);
	}

	.subsection {
		list-style-type: none;
	}

	.subsection-title {
		font-weight: var(--font-weight-medium);
	}

	.list-item {
		margin-block-start: var(--space-2);
		list-style: disc;
		margin-inline-start: 1em;
		text-align: left;
	}

	.list-item::marker {
		color: var(--color-primary);
	}

	@media screen and (min-width: 550px) {
		header {
			align-items: baseline;
			grid-template-columns: auto auto 1fr auto;
			text-align: initial;
			line-height: 1;
		}

		header img {
			display: inline-block;
		}

		.name,
		.profession {
			align-self: last baseline;
		}

		.profession {
			grid-column-end: -1;
		}

		.contact-info {
			border-image: var(--std-gradient) 1;
			border-block-start: 2px solid;
			flex-direction: row;
			grid-column: 1/-1;
			padding-block-start: var(--space-1);
		}

		.list-item {
			margin-inline-start: calc(1em + 2ch);
		}
	}

	@media print {
		section:has(.section-list > .list-item),
		.subsection {
			break-inside: avoid;
		}
	}
</style>

<BaseLayout
	title="Resume"
	description="A formatted record of my work experience, education, and skills kept mostly up to date"
>
	<header>
		<Logo />
		<h1 class="contents">
			<div class="primary-heading name">Nicolaos Skimas</div>
			<div class="profession">Web Developer</div>
		</h1>
		<address class="contact-info">
			<a class="link" href="/">https://nicolaos.dev</a>
			<a class="link" href="mailto:contact@nicolaos.dev">
				contact@nicolaos.dev
			</a>
		</address>
	</header>

	<main>
		{
			orderedSectionNames.map((sectionName) => (
				<section>
					<h2 class="secondary-heading">{sectionName}</h2>
					<ul class="section-list">
						{Array.isArray(sections[sectionName])
							? (
									sections[
										sectionName
									] as SingleLevelResumeSection
								).map((content) => (
									<li class="list-item">{content}</li>
								))
							: Object.entries(
									sections[
										sectionName
									] as DualLevelResumeSection,
								).map(([title, items]) => (
									<li class="subsection">
										<h3 class="subsection-title">
											{title}
										</h3>
										<ul>
											{items.map((content) => (
												<li class="list-item">
													{content}
												</li>
											))}
										</ul>
									</li>
								))}
					</ul>
				</section>
			))
		}
	</main>
</BaseLayout>
