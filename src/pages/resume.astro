---
import { type CollectionEntry, getCollection, z } from "astro:content";
import BaseLayout from "@layouts/BaseLayout.astro";
import {
	dualLevelResumeSection,
	singleLevelResumeSection,
} from "../content/config";

type SectionId = CollectionEntry<"resume-sections">["id"];
type Sections = {
	[key in SectionId]: CollectionEntry<"resume-sections">["data"];
};
type DualLevelResumeSection = z.infer<typeof dualLevelResumeSection>;
type SingleLevelResumeSection = z.infer<typeof singleLevelResumeSection>;

const sections: Sections = (await getCollection("resume-sections")).reduce(
	(acc, curr) => {
		acc[curr.id] = curr.data;
		return acc;
	},
	{} as Sections,
);

const orderedSectionNames: Array<SectionId> = [
	"Work Experience",
	"Education",
	"Technical Skills",
	"Essential Traits",
	"Volunteer Work",
	"Awards",
] as const;
---

<style>
	header,
	main {
		text-align: center;
	}

	header {
		display: grid;
		gap: var(--space-s);
		margin-block-end: var(--space-m-l);
	}

	header img {
		display: none;
		inline-size: var(--space-m);
	}

	.resume-header_name {
		font-size: var(--font-size-primary-heading);
	}

	.resume-header_profession {
		font-size: var(--font-size-secondary-heading);
	}

	.resume-header_contact-info {
		display: flex;
		flex-direction: column;
		font-size: var(--font-size-base);
		gap: var(--space-xs-s);
		list-style-type: none;
	}

	h2 {
		font-weight: bold;
		font-size: var(--font-size-primary-heading);
	}

	h3 {
		font-size: var(--font-size-secondary-heading);
	}

	section:not(:first-child) {
		margin-block-start: var(--space-l);
	}

	.section-list,
	.section-sublist:not(:first-child) {
		margin-block-start: var(--space-m-l);
	}

	.section-sublist {
		list-style-type: none;
	}

	.list-item {
		margin-block-start: var(--space-m);
		list-style: inside disc;
		line-height: 1.4;
		font-size: var(--font-size-base);
	}
	.list-item::marker {
		color: var(--color-primary);
	}

	@media (min-width: 620px) {
		header,
		main {
			text-align: initial;
		}

		header {
			align-items: center;
			grid-template-columns: auto auto 1fr auto;
			text-align: initial;
			gap: var(--space-xs-s);
		}

		header img {
			display: inline-block;
		}

		.resume-header_name {
			line-height: 1;
			font-size: var(--font-size-secondary-heading);
		}

		.resume-header_profession {
			grid-column-end: -1;
			font-size: var(--font-size-base);
			line-height: 1;
		}

		.resume-header_contact-info {
			border-image: var(--std-gradient) 1;
			border-block-start: 2px solid;
			flex-direction: row;
			grid-column: 1/-1;
			padding-block-start: var(--space-xs);
		}

		.list-item {
			margin-inline-start: var(--space-s-m);
		}
	}
</style>

<BaseLayout
	title="Resume"
	description="A formatted record of my work experience, education, and skills kept mostly up to date"
>
	<header>
		<img alt="" height="1" src="/assets/img/logo.svg" width="1" />
		<h1 class="contents">
			<div class="resume-header_name">Nicolaos Skimas</div>
			<div class="resume-header_profession">Web Developer</div>
		</h1>
		<ul class="resume-header_contact-info">
			<li><a class="link" href="/">https://nicolaos.dev</a></li>
			<li>
				<a class="link" href="mailto:contact@nicolaos.dev">
					contact@nicolaos.dev
				</a>
			</li>
		</ul>
	</header>

	<main>
		{
			orderedSectionNames.map((sectionName) => (
				<section>
					<h2>{sectionName}</h2>
					<ul class="section-list">
						{Array.isArray(sections[sectionName])
							? (
									sections[
										sectionName
									] as SingleLevelResumeSection
								).map((content) => (
									<li class="list-item">{content}</li>
								))
							: Object.entries(
									sections[
										sectionName
									] as DualLevelResumeSection,
								).map(([title, items]) => (
									<li class="section-sublist">
										<h3>{title}</h3>
										<ul>
											{items.map((content) => (
												<li class="list-item">
													{content}
												</li>
											))}
										</ul>
									</li>
								))}
					</ul>
				</section>
			))
		}
	</main>
</BaseLayout>
